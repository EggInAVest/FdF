

#include "fdf.h"

int	main(int argc, char **argv)
{
	t_fdf	*fdf;

	if (arg_validation(argc, argv))
		exit(1);
	fdf = (t_fdf *)malloc(sizeof(t_fdf));
	read_map(fdf, argv[1]);
	init_fdf(fdf);
	draw(fdf);
}

void	draw(t_fdf *fdf)
{
	int	x;
	int	y;

	y = 0;
	while (y < fdf->height)
	{
		x = 0;
		while (x < fdf->width)
		{
			draw_points(fdf, x, y);
			x++;
		}
		y++;
	}
}

void	draw_points(t_fdf *fdf, int x, int y)
{
	t_points	p1;
	t_points	p2;

	p1.x = x * fdf->scale;
	p1.y = y * fdf->scale;
	p1.z = fdf->z_array[y][x];

	if (x < fdf->width - 1)
	{
		p2.x = (x + 1) * fdf->scale;
        p2.y = y * fdf->scale;
        p2.z = fdf->z_array[y][x + 1];
        draw_line(fdf, p1, p2);
    }

    if (y < fdf->height - 1)
    {
        p2.x = x * fdf->scale;
        p2.y = (y + 1) * fdf->scale;
        p2.z = fdf->z_array[y + 1][x];
        draw_line(fdf, p1, p2);
    }
}

void draw_line(t_fdf *fdf, t_point p1, t_point p2)
{
    float delta_x;
    float delta_y;
    int max;
    
    calc_isometric(&p1.x, &p1.y, p1.z);
    calc_isometric(&p2.x, &p2.y, p2.z);

    /*				FIGURE OUT THE COLORS				*/
    //fdf->points.color = (p1.z) ? 0xe80c0cff : 0xffffffff;

    /*-------------------BRESENHEIM---------------------*/
    delta_x = p2.x - p1.x;
    delta_y = p2.y - p1.y;
    max = (delta_x > delta_y) ? delta_x : delta_y;
    delta_x /= max;
    delta_y /= max;
	/*---------------------------------------------------*/
    while ((int)(p1.x - p2.x) || (int)(p1.y - p2.y)) 
    {
        mlx_put_pixel(fdf->img, p1.x + fdf->offset_x, p1.y + fdf->offset_y, fdf->points.color);
        p1.x += delta_x;
        p1.y += delta_y;
    }
}
